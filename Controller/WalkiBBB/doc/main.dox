/**
 * @mainpage Walki mainboard application documentation
 *
 * @section intro_sec Introduction
 * WalkiBBB is the main programs that runs on the exoskeleton embededded
 * computer, the BeagleBone Black.
 * Its main role is to control the exoskeleton at high level. It also manages
 * the network communication.
 *
 * @section code_struct_sec Code structure
 * @image html modules_overview.png
 *
 * @section bbb_resources_sec BeagleBone Black resources usage
 * - UART:
 *  - UART1: motorboard 1.
 *  - UART2: motorboard 2.
 *  - UART4: motorboard 3.
 *  - UART5: motorboard 4.
 * - I2C:
 *  - I2C1: on-board sensors (MPU-6050 and HMC5883L).
 *  - I2C2: on-board EEPROM.
 * - SPI:
 *  - SPI1: feet sensors (ADC124S01/ADS7844 and MPU-6000).
 * - GPIO:
 *  - GPIO3_17: left foot ADC SPI chipselect.
 *  - GPIO0_7: right foot ADC SPI chipselect.
 *  - GPIO1_17: left foot IMU SPI chipselect.
 *  - GPIO3_19: right foot IMU SPI chipselect.
 * - ADC :
 *  - AIN0: battery voltage.
 *  - AIN1: currently unused.
 *  - AIN2: currently unused.
 *  - AIN3: currently unused.
 *  - AIN4: battery current sensor.
 *  - AIN5: currently unused.
 *  - AIN6: currently unused.
 * - PWM:
 *  - PWM_1A: loudspeaker.
 *  - PWM_1B: currently unused.
 *  - PWM_2A: case fan.
 *  - PWM_2B: currently unused.
 *
 * @section compilation_remarks_sec Compilation remarks
 * The BeagleBone/config/config.h file sets the general options of the
 * application.
 * Note that this file is not under version control, so it has to be created by
 * duplicating and renaming the file config_template.h to config.h.
 *
 * @section new_controller_procedure Create a new controller
 *  - Create a new class inheriting from Controller
 * (BeagleBone/controllers/controller.h), in a new pair of .h/.cpp files.
 *  - In your new .h file, use typedef to define the type "SelectedController"
 * as an alias to your new class. Also define the MAIN_LOOP_PERIOD constant as
 * float to set the controller loop period (in [s]). <br>
 * Example:
 * \code{.cpp}
 * #define MAIN_LOOP_PERIOD 0.002f // Main loop period [s].
 * typedef MyNewController SelectedController;
 * \endcode
 *  - Implement the constructor. It should exactly have this signature:
 * \code{.cpp}
 * MyNewController(PeripheralsSet peripherals);
 * \endcode
 *  - Implement the update() method.
 *  - In BeagleBone/config/config.h, include the .h file of your new controller.
 * Make sure only one controller header is included, otherwise the compilation
 * will fail.
 */
 
/**
 * @defgroup Main Main
 * @brief Principal high-level classes.
 */

/**
 * @defgroup Drivers Drivers
 * @brief Drivers for hardware abstraction.
 */

/**
 * @defgroup Lib Lib
 * @brief Libraries and utilities, independant from hardware.
 */
 
/**
 * @defgroup Filters Filters
 * @brief Digital signal filters.
 * @ingroup Lib
 */
 
/**
 * @defgroup Controllers Controllers
 * @brief High-level device controller.
 */